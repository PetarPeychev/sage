program = (statement)*

statement = (let | var | typedef | import)

let = "let" id ":" type "=" block

var = "var" id ":" type "=" block

typedef = "type" id "=" type

import = "import" id ("." id)*

type = t ("or" type)*

t = (
    | "int"
    | "bool"
    | "string"
    | "float"
    | "none"
    | "any"
    | "[" type "]"
    | "{" (id ":" type ("," id ":" type)+)? "}"
    | id "->" type
    | id
    | "(" type ")"
)

block = (
    | expr (";" expr)*
)

expr = (
    | "if" expr "then" expr "else" expr
    | "let" id "=" expr
    | "var" id "=" expr
    | id "->" expr
    | apply ("|>" apply)*
)

apply = term0 (term0)*

term0 = term1 ("or" term1)*

term1 = term2 ("and" term2)*

term2 = term3 (("is" | "<" | ">" | "<=" | ">=") term3)*

term3 = term4 (("+" | "-") term4)*

term4 = term5 (("*" | "/" | "%") term5)*

term5 = term6 ("^" term6)*

term6 = (
    | id
    | int
    | float
    | string
    | "true"
    | "false"
    | "none"
    | "not" term6
    | "-" term6
    | "[" (expr ("," expr)*)? "]"
    | "{" (id ":" expr ("," id ":" expr)+)? "}"
    | "(" expr ")"
)

id = ["a"-"z""A"-"Z""_""."]["a"-"z""A"-"Z""0"-"9""_""."]*

int = (
    | "0"
    | ["1"-"9"] (["0"-"9"])*
)

float = int "." int

string = " ([^\"])* "
