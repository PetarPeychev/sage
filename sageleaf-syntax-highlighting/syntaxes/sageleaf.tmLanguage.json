{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "sageleaf",
  "patterns": [
    { "include": "#strings" },
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#operators" },
    { "include": "#types" },
    { "include": "#literals" }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.sageleaf",
          "match": "\\b(if|elif|else|let|var|type|interface|import|export|and|or|not|is|match|return|for|in|while|break|continue)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.sageleaf",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.sageleaf",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "literals": {
      "patterns": [
        {
          "name": "constant.language.sageleaf",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.numeric.decimal.sageleaf",
          "match": "\\b([0-9][0-9]*)(\\.[0-9]+)?\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign",
          "begin": "#",
          "end": "\n"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.sageleaf",
          "match": "(\\|>|>=|<=|->|\\+|-|\\*|\\^|/|<|>|%|=)"
        },
        {
          "name": "keyword.other.sageleaf punctuation.other.colon punctuation.colon",
          "match": ":"
        },
        {
          "name": "keyword.other.sageleaf punctuation.other.period punctuation.separator.period",
          "match": "\\."
        },
        {
          "name": "keyword.other.sageleaf punctuation.separator.terminator punctuation.separator.semicolon",
          "match": ";"
        },
        {
          "name": "keyword.other.sageleaf punctuation.comma punctuation.separator.comma",
          "match": ","
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.sageleaf",
          "match": "\\b(i8|u8|i16|u16|i32|u32|i64|u64|i128|u128|f32|f64|bool|str)\\b"
        }
      ]
    }
  },
  "scopeName": "source.sageleaf"
}
